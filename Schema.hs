{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE TypeFamilies #-}

-- generated by 'Morpheus' CLI
module Schema (rootResolver) where

import  GHC.Generics  (Generic)
import  Data.Morpheus.Kind  (SCALAR, ENUM, INPUT_OBJECT, OBJECT, UNION)
import  Data.Morpheus.Types  (GQLRootResolver(..), toMutResolver, IORes, IOMutRes, IOSubRes, Event(..), SubRootRes, GQLType(..), GQLScalar(..), ScalarValue(..))
import  Data.Text  (Text)

rootResolver :: GQLRootResolver IO () () Query Mutation ()
rootResolver =
  GQLRootResolver
    { queryResolver = resolveQuery
  ,  mutationResolver = resolveMutation
  ,  subscriptionResolver = return ()
    }




---- GQL Query ------------------------------- 
data Query = Query 
    { getObsEtl :: () -> IORes (Maybe ObsETL)
  ,  getStatus :: () -> IORes Text
    }
 deriving (Generic)

instance GQLType Query where
  type KIND Query = OBJECT



resolveQuery :: IORes Query
resolveQuery = return Query 
    { getObsEtl = const $ return Nothing
  ,  getStatus = const resolveText
    }




---- GQL Mutation ------------------------------- 
data Mutation = Mutation 
    { newObsEtl :: ArgNewObsEtl -> IORes ObsETL
    }
 deriving (Generic)

data ArgNewObsEtl = ArgNewObsEtl 
    { value :: ObsEtlInput
    }
 deriving (Generic)

instance GQLType Mutation where
  type KIND Mutation = OBJECT



resolveMutation :: IOMutRes () () Mutation
resolveMutation = return Mutation 
    { newObsEtl = const resolveObsETL
    }




---- GQL Subject ------------------------------- 
data Subject = Subject 
    { subjectType :: () -> IORes Text
  ,  qualities :: () -> IORes [Quality]
    }
 deriving (Generic)

instance GQLType Subject where
  type KIND Subject = OBJECT



resolveSubject :: IORes Subject
resolveSubject = return Subject 
    { subjectType = const $ return ""
  ,  qualities = const $ return []
    }




---- GQL Span ------------------------------- 
data Span = Span 
    { rangeStart :: () -> IORes Int
  ,  rangeLength :: () -> IORes Int
  ,  reduced :: () -> IORes Boolean
    }
 deriving (Generic)

instance GQLType Span where
  type KIND Span = OBJECT



resolveSpan :: IORes Span
resolveSpan = return Span 
    { rangeStart = const $ return 0
  ,  rangeLength = const $ return 0
  ,  reduced = const resolveBoolean
    }




---- GQL ReqMeasurement ------------------------------- 
data ReqMeasurement = ReqMeasurement 
    { measurementType :: () -> IORes Text
  ,  components :: () -> IORes [Maybe ReqComponent]
    }
 deriving (Generic)

instance GQLType ReqMeasurement where
  type KIND ReqMeasurement = OBJECT



resolveReqMeasurement :: IORes ReqMeasurement
resolveReqMeasurement = return ReqMeasurement 
    { measurementType = const $ return ""
  ,  components = const $ return []
    }




---- GQL SpanValues ------------------------------- 
data SpanValues = SpanValues 
    { spanValues :: () -> IORes [Span]
    }
 deriving (Generic)

instance GQLType SpanValues where
  type KIND SpanValues = OBJECT



resolveSpanValues :: IORes SpanValues
resolveSpanValues = return SpanValues 
    { spanValues = const $ return []
    }




---- GQL MeasurementInput ------------------------------- 
data MeasurementInput = MeasurementInput 
    { measurementType :: Text
  ,  components :: [ComponentInput]
    }
 deriving (Generic)

instance GQLType MeasurementInput where
  type KIND MeasurementInput = INPUT_OBJECT







---- GQL TypeKey ------------------------------- 
data TypeKey = TypeKey 
    { typeKey :: () -> IORes Text
    }
 deriving (Generic)

instance GQLType TypeKey where
  type KIND TypeKey = OBJECT



resolveTypeKey :: IORes TypeKey
resolveTypeKey = return TypeKey 
    { typeKey = const $ return ""
    }




---- GQL Component ------------------------------- 
data Component = Component 
    { componentName :: () -> IORes Text
  ,  componentValues :: () -> IORes ComponentValues
    }
 deriving (Generic)

instance GQLType Component where
  type KIND Component = OBJECT



resolveComponent :: IORes Component
resolveComponent = return Component 
    { componentName = const $ return ""
  ,  componentValues = const resolveComponentValues
    }




---- GQL ComponentValues ------------------------------- 
data ComponentValues = 
  ComponentValues_TXTVALUES TxtValues
  | ComponentValues_INTVALUES IntValues
  | ComponentValues_SPANVALUES SpanValues deriving (Generic)

instance GQLType ComponentValues where
  type KIND ComponentValues = UNION



resolveComponentValues :: IORes ComponentValues
resolveComponentValues = ComponentValues_TXTVALUES  <$> resolveTxtValues



---- GQL QualKey ------------------------------- 
data QualKey = QualKey 
    { qualKey :: () -> IORes Text
    }
 deriving (Generic)

instance GQLType QualKey where
  type KIND QualKey = OBJECT



resolveQualKey :: IORes QualKey
resolveQualKey = return QualKey 
    { qualKey = const $ return ""
    }




---- GQL ComponentInput ------------------------------- 
data ComponentInput = ComponentInput 
    { componentName :: Text
  ,  componentValues :: FieldValuesInput
    }
 deriving (Generic)

instance GQLType ComponentInput where
  type KIND ComponentInput = INPUT_OBJECT







---- GQL FieldValuesInput ------------------------------- 
data FieldValuesInput = FieldValuesInput 
    { txtValues :: Maybe [Text]
  ,  intValues :: Maybe [Int]
  ,  spanValues :: Maybe [SpanInput]
    }
 deriving (Generic)

instance GQLType FieldValuesInput where
  type KIND FieldValuesInput = INPUT_OBJECT







---- GQL Key ------------------------------- 
data Key = 
  Key_TYPEKEY TypeKey
  | Key_QUALKEY QualKey
  | Key_COMPKEY CompKey
  | Key_SPANKEY SpanKey deriving (Generic)

instance GQLType Key where
  type KIND Key = UNION



resolveKey :: IORes Key
resolveKey = Key_TYPEKEY  <$> resolveTypeKey



---- GQL SpanInput ------------------------------- 
data SpanInput = SpanInput 
    { rangeStart :: Int
  ,  rangeLength :: Int
  ,  reduced :: Boolean
    }
 deriving (Generic)

instance GQLType SpanInput where
  type KIND SpanInput = INPUT_OBJECT







---- GQL Measurement ------------------------------- 
data Measurement = Measurement 
    { measurementType :: () -> IORes Text
  ,  components :: () -> IORes [Component]
    }
 deriving (Generic)

instance GQLType Measurement where
  type KIND Measurement = OBJECT



resolveMeasurement :: IORes Measurement
resolveMeasurement = return Measurement 
    { measurementType = const $ return ""
  ,  components = const $ return []
    }




---- GQL SubjectInput ------------------------------- 
data SubjectInput = SubjectInput 
    { subjectType :: Text
  ,  qualities :: [QualityInput]
    }
 deriving (Generic)

instance GQLType SubjectInput where
  type KIND SubjectInput = INPUT_OBJECT







---- GQL ObsEtlInput ------------------------------- 
data ObsEtlInput = ObsEtlInput 
    { subject :: SubjectInput
  ,  measurements :: [MeasurementInput]
    }
 deriving (Generic)

instance GQLType ObsEtlInput where
  type KIND ObsEtlInput = INPUT_OBJECT







---- GQL Quality ------------------------------- 
data Quality = Quality 
    { qualityName :: () -> IORes Text
  ,  qualityValues :: () -> IORes QualityValues
    }
 deriving (Generic)

instance GQLType Quality where
  type KIND Quality = OBJECT



resolveQuality :: IORes Quality
resolveQuality = return Quality 
    { qualityName = const $ return ""
  ,  qualityValues = const resolveQualityValues
    }




---- GQL QualityValues ------------------------------- 
data QualityValues = 
  QualityValues_TXTVALUES TxtValues
  | QualityValues_INTVALUES IntValues deriving (Generic)

instance GQLType QualityValues where
  type KIND QualityValues = UNION



resolveQualityValues :: IORes QualityValues
resolveQualityValues = QualityValues_TXTVALUES  <$> resolveTxtValues



---- GQL TxtValues ------------------------------- 
data TxtValues = TxtValues 
    { txtValues :: () -> IORes [Text]
    }
 deriving (Generic)

instance GQLType TxtValues where
  type KIND TxtValues = OBJECT



resolveTxtValues :: IORes TxtValues
resolveTxtValues = return TxtValues 
    { txtValues = const $ return []
    }




---- GQL QualityInput ------------------------------- 
data QualityInput = QualityInput 
    { qualityName :: Text
  ,  qualityValues :: FieldValuesInput
    }
 deriving (Generic)

instance GQLType QualityInput where
  type KIND QualityInput = INPUT_OBJECT







---- GQL IntValues ------------------------------- 
data IntValues = IntValues 
    { intValues :: () -> IORes [Int]
    }
 deriving (Generic)

instance GQLType IntValues where
  type KIND IntValues = OBJECT



resolveIntValues :: IORes IntValues
resolveIntValues = return IntValues 
    { intValues = const $ return []
    }




---- GQL SpanKey ------------------------------- 
data SpanKey = SpanKey 
    { spanKey :: () -> IORes Text
    }
 deriving (Generic)

instance GQLType SpanKey where
  type KIND SpanKey = OBJECT



resolveSpanKey :: IORes SpanKey
resolveSpanKey = return SpanKey 
    { spanKey = const $ return ""
    }




---- GQL ObsETL ------------------------------- 
data ObsETL = ObsETL 
    { id :: () -> IORes Text
  ,  subject :: () -> IORes Subject
  ,  measurements :: () -> IORes [Measurement]
    }
 deriving (Generic)

instance GQLType ObsETL where
  type KIND ObsETL = OBJECT



resolveObsETL :: IORes ObsETL
resolveObsETL = return ObsETL 
    { id = const $ return ""
  ,  subject = const resolveSubject
  ,  measurements = const $ return []
    }




---- GQL CompKey ------------------------------- 
data CompKey = CompKey 
    { compKey :: () -> IORes Text
    }
 deriving (Generic)

instance GQLType CompKey where
  type KIND CompKey = OBJECT



resolveCompKey :: IORes CompKey
resolveCompKey = return CompKey 
    { compKey = const $ return ""
    }




---- GQL ReqComponent ------------------------------- 
data ReqComponent = ReqComponent 
    { componentName :: () -> IORes Text
  ,  componentValues :: () -> IORes ReqComponentValues
    }
 deriving (Generic)

instance GQLType ReqComponent where
  type KIND ReqComponent = OBJECT



resolveReqComponent :: IORes ReqComponent
resolveReqComponent = return ReqComponent 
    { componentName = const $ return ""
  ,  componentValues = const resolveReqComponentValues
    }




---- GQL ReqComponentValues ------------------------------- 
data ReqComponentValues = ReqComponentValues 
    { componentValues :: () -> IORes ComponentValues
  ,  reduced :: () -> IORes Boolean
    }
 deriving (Generic)

instance GQLType ReqComponentValues where
  type KIND ReqComponentValues = OBJECT



resolveReqComponentValues :: IORes ReqComponentValues
resolveReqComponentValues = return ReqComponentValues 
    { componentValues = const resolveComponentValues
  ,  reduced = const resolveBoolean
    }

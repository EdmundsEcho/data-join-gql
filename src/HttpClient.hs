{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE ConstraintKinds #-}
-- |
-- Module      : HttpClient
-- Description : Client access to shared files on an S3-compliant resource
-- Copyright   : (c) Lucivia LLC, 2022
-- Maintainer  : edmund.cape@lucivia.com
-- Stability   : experimental
-- Portability : POSIX
--
-- ** Overview
--
-- Provides the functionality required to access files generated by
-- other microservices.
--
module HttpClient
  ( module HttpClient
  )
  where
--------------------------------------------------------------------------------
import           Protolude      hiding (State, Handler)
import           Data.Has
--------------------------------------------------------------------------------
import Control.Exception.Safe
--------------------------------------------------------------------------------
import           Network.HTTP.Client
import           Network.HTTP.Client.TLS
--------------------------------------------------------------------------------
-- App specific
import           Config
--------------------------------------------------------------------------------
--

-- ** HttpManager

-- |
-- Hosts the shared manager and placeholder for reusable request.
data HttpManager = HttpManager
    { stateInitReq :: !Request
    , stateManager :: !Manager
    }

type HttpClient r m = (MonadReader r m, Has HttpManager r, MonadIO m, MonadThrow m)

type Session = CookieJar

data UnexpectedResponse a =
    UnexpectedResponse Request (Response a)
    deriving (Show)

instance (Typeable a, Show a) => Exception (UnexpectedResponse a)

withHttpManager :: Config -> (HttpManager -> IO a) -> IO a
withHttpManager cfg action = do
    mgr     <- newManager tlsManagerSettings
    initReq <- parseRequest $ fileShareUri cfg
    let initReqWithJson =
            initReq { requestHeaders =
                        [("Content-Type", "application/json; charset=utf-8")]
                    }
    action $ HttpManager initReqWithJson mgr

# Obs - input
# (state from which all else follows)
input ObsEtlInput {
  id: String!
  subject: SubjectInput!
  measurements: [MeasurementInput!]!
}
input SubjectInput {
  subjectType: String!
  qualities: [QualityInput!]!
}
input MeasurementInput {
  measurementType: String!
  components: [ComponentInput!]!
}
input QualityInput {
  qualityName: String!
  qualityValues: QualValuesInput!
}
input ComponentInput {
  componentName: String!
  componentValues: CompValuesInput!
}

# Obs - View
"""
Describes the ETL Observation. The query used to generate this view
does not include the capacity to subselect values within the structure.
Each observation has a Subject and a collection of Measurements.
Note: see the obsEtlLeanView and obsEtlView fragments.
"""
type ObsETL {
  """
  ID is a placeholder for now.  The Model hosts the object with "OID001".
  """
  id: String!
  subject: Subject!
  measurements: [Measurement!]!
}

"""
Interface to signal the count property
"""
interface Count {
  count: Int!
}

"""
An observation has a single subject. Each subject has a collection
of qualities.
"""
type Subject {
  """
  Testing Subject documentation
  """
  subjectType: String!
  qualities: [Quality!]!
}
"""
A subject has many Qualities. Each Quality has a Key:: QualKey
and values :: FieldValues.
"""
type Quality implements Count {
  """
  A unique identifier.
  """
  qualityName: String!
  """
  Quality values is a `union` of `TxtValues` and `IntValues`.
  """
  qualityValues: QualityValues!
  """
  Number of values.
  """
  count: Int!
}
"""
Each measurement has a collection of Components.
"""
type Measurement {
  """
  A unique identifier.
  """
  measurementType: String!
  components: [Component!]!
}
"""
A component is a field. The information in the field describes subsets
of a measurement. For instance, if measuring light, I could have a field
called color. The subsets of light might be blue, green, red and other.
Combined, the colors represent all of the light measured.
"""
type Component implements Count {
  """
  A unique identifier. E.g., Color
  """
  componentName: String!
  """
  Component values is a union of `TxtValues`, `IntValues` and
  `SpanValues`. The values for each are retrieved in their respective
  `Object` with the txt, int or spanValues prop.
  """
  componentValues: ComponentValues!
  """
  Number of values.
  """
  count: Int!
}

"""
Union of Keys to encode the key's type. Each is an object.
"""
union Key = TypeKey | QualKey | CompKey | SpanKey

"""
Part of Enum Key. Object is required to encode the Key's value.
The Enum value encodes the Key's type.
"""
type TypeKey {
  typeKey: String!
}
type QualKey {
  qualKey: String!
}
type CompKey {
  compKey: String!
}
type SpanKey {
  spanKey: String!
}

"""
Select values from a Component
"""
input FromComponent {
  measurementType: String!
  componentName: String!
  contains: String
  startsWith: String
  endsWith: String
}

"""
Select values from a Quality
"""
input FromQuality {
  subjectType: String
  qualityName: String!
  contains: String
  startsWith: String
  endsWith: String
}

"""
Output type
Perhaps support Span; how different from request?
@likely deprecate; use levels instead
"""
union SelectedValues = TxtValues | IntValues | SpanValues | Empty

type Empty {
  value: EmptySingleton!
}

enum EmptySingleton {
  EMPTY
}

input IntPredicateInput {
  threshold: Int!
  relation: FilterRelationInput!
}

enum FilterRelationInput {
  GT
  LT
  EQ
}

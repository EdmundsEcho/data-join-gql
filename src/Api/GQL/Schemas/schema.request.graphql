# Request inputs
"""
A data pull from the ObsETL data.  A subset of the ObsETL universe.
The request output is a table of data.  The length of the tabel is defined
by the qualities chosen (qualities that describe the subjects).
The width of the table (number of columns or fields) is often set mostly by
the mix of components within a measurement.  Measurements and their components
have no influence on the length of the table, i.e., on the number of records.
The request can include any number of requests from the same 'Measurement'
can be defined with different mixes of components.
"""
input RequestInput {
  """
  There is only ever one subject type.  Missing input will default to the
  subject type for the data set. All subjects will be included. No quality
  field will be included.
  """
  subReq: QualityMixInput
  """
  If not provided, all measurements will be included.  None of the measurements
  will be cut into component slices.
  """
  meaReqs: [ComponentMixInput!]
}
"""
Fields that can reverse the request i.e., EQ -> NOT EQ implement this interface
"""
interface AntiRequest {
  antiRequest: Bool!
}

"""
`QualityMixInput`
Describes the requested mix of Subject Qualities. This mix of qualities
determines the number of Subjects included in the request (i.e., the
number of records in the requested data set)
"""
input QualityMixInput {
  subjectType: String
  qualityMix: [QualityReqInput!]
}
"""
`QualityReqInput`
### Encoding
| Keys   | Key  | Values | Means |
| :------|:---- | :----- | :---- |
| Keys | Nothing | Nothing | Field for each quality; all subjects |
| Nothing | Key | Nothing  | Field for the quality; all subjects |
| Nothing | Key | Values   | Field for the quality; subset of subjects |
| Nothing | Nothing | Values   | Invalid |
  - QualKey Nothing => display the quality field, select all levels
  - QualKey Just vs => display the quality field, select levels
"""
input QualityReqInput {
  """
  Each entry generates a quality field in the data request.
  Use this field to pull all of the values for the quality.
  """
  qualityNames: [String!]
  """
  Each entry generates a quality field in the data request.
  Use this field in combination with the 'qualityValues' field to
  pull a subset of the values for that quality.
  """
  qualityName: String
  """
  This field is a filter that selects a subset of values. Thus
  it reduces the number of records.  If left empty, all of
  the qualities will be selected.
  """
  qualityValues: QualValuesInput
  """
  The anti version of qualityName (i.e., "not these values")
  """
  antiRequest: Bool! = false
}
"""
`ComponentMixInput`
Offers two search capacities.
1. A collection of `ComponentReqInput` for a specific `measurementType`.
2. List of `measurementTypes`
The input describes which components to include in the measurement.
"""
input ComponentMixInput {
  """
  Each entry will generate a single field that summarizes the Measurement
  values for each subject.
  """
  measurementTypes: [String!]
  """
  Each entry will generate a series of fields that summarize the Measurement
  value for each combination of component values.
  """
  measurementType: String
  """
  Describes the combination of component values used to generate the series of
  measurements (how to cut the pie, each piece contributing to the series).
  """
  componentMix: [ComponentReqInput!]
}
"""
`ComponentReqInput`
##  Encoding
| Keys   | Key  | Values | Reduced | Means |
| :------|:---- | :----- | :------ | :---- |
| Keys | Nothing | Nothing | NA    | Series of fields using all values |
| Nothing | Key | Nothing | NA     | Series of fields using all values |
| Nothing | Key | Values | False   | Series of fields using specified values |
| Nothing | Key | Values | True    | A summary field using the specified values |
| Nothing | Nothing | Values | NA  | Invalid |
    - 'CompKeys Nothing Nothing'
                         => create a series of fields using all levels (Exp)
    - 'CompKey Nothing'  => create a series of fields using all levels (Exp)
    - 'CompKey (Just vs) =>
      - 'Exp': create a series using the levels specified
      - 'Red': create a single summary field using the levels specified
Use `componentNames` to request *all of the values* in each of the
components.  Use *componentName* to request a subset of values of a component.
"""
input ComponentReqInput {
  """
  Request a series of fields from the combination of all values (levels)
  from each of the components.
  """
  componentNames: [String!]
  """
  Will generate a series of fields using the values specified in the
  'componentValues' field. Components that are not speficied will default
  to a summary computation.
  """
  componentName: String
  """
  Specify which values to include in the either the summary or series of the
  'Measurement'. If not specified, the request generates a series of fields
  using all values (levels). Components that are not speficied will default
  to a summary computation.
  """
  componentValues: CompValuesReqInput
  """
  The anti version of componentValues (i.e., "not these values")
  """
  antiRequest: Bool! = false
}
"""
A requested component needs to specify if the collection of values is meant
to create a single (reduced = True) or multiple fields in the requested
data table (Request -> Matrix).
"""
input CompValuesReqInput {
  txtValues: [String!]
  intValues: [Int!]
  spanValues: [SpanInput!]
  reduced: Boolean!
}

# View of the Model
"""
Minimum viable is a Subject and Measurement type request.
"""
type Request implements FieldCount {
  subReq: QualityMix!
  meaReqs: [ComponentMix!]!
  fieldCount: Int!
  meta: [Meta!]!
}
type Meta {
  field: String!
  value: String!
}
type QualityMix implements Warning & FieldCount {
  """
  Reports the subject type for this data set.
  """
  subjectType: String!
  """
  View - A minimum of one measurement will be included in the request.
  """
  qualityMix: [ReqQuality!]
  """
  Contribution to the number of fields in the data request.
  """
  fieldCount: Int!
  """
  Warning in the event there are not qualities in the request.
  """
  warning: String
}
type ReqQuality implements Message & AntiRequest {
  """
  A field with this name will be included in the request.
  """
  qualityName: String!

  """
  The values in this field determine what 'Subjects' will be included
  in the data request. The type is a `union` of `TxtValues` and `IntValues`.
  """
  values: QualityValues

  """
  The anti request (meaning "not these values")
  Note: Only considered when values is null.
  """
  antiRequest: Bool!

  """
  Warnings generated during the processing of the request.
  """
  message: String
}
"""
View - A minimum of one measurement
"""
type ComponentMix implements Message & FieldCount {
  """
  The request will include a field that summarizes the measurement values
  based on the combination of components.
  """
  measurementType: String!
  """
  Produces a series of fields consisting of the combinations of measurement
  components described here. If none are included, a single summary field will be
  included in the request (i.e., a series of length one).
  """
  componentMix: [ReqComponent!]
  """
  Contribution to the number of fields in the data request.
  """
  fieldCount: Int!

  message: String
}
type ReqComponent implements Message & AntiRequest {
  """
  Describes which measurement components will be included in the series of
  measurememt fields.
  """
  componentName: String!
  """
  Describes what measurement data will be included for each subject.
  Describes which 'cuts' of the data to include. If left empty when the
  component is included, it will produce a series with all of the field
  levels.
  __Note__: For now, only display when the request generates a series using
  each of the values in the 'ReqCompValues'.
  """
  values: ComponentValues

  """
  The anti request (meaning "not these values")
  __Note__: Applies on to "subset" requests i.e., when the values field is null.
  """
  antiRequest: Bool!

  """
  Describes whether the data included will be 'reduced' to a single summary
  values, or a data series.
  """
  reduced: Boolean!
  message: String
}
"""
Interfaces to provide meta-data
"""
interface Warning {
  warning: String
}
interface Message {
  message: String
}
interface FieldCount {
  """
  Contribution to the number of fields in the data request.
  """
  fieldCount: Int!
}

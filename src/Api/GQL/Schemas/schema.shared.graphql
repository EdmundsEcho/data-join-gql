# Share data types
# Share between
# * ObsETL inputs
# * ObsETL view
# * Request input
# * Request view

# Input
"""
Used by ObsETL for Component and Quality values. Also used by Quality Requests.
It is not used by Component requests which require an additional field.  See
'ReqFieldValuesInput'.

**Note** This field is similar to 'ReqFieldValues'.  This object does not
include the 'reduced' specification.
"""
input QualValuesInput {
  txtValues: [String!]
  intValues: [Int!]
}
"""
Used by ObsETL for Component and Quality values. Also used by Quality Requests.
It is not used by Component requests which require an additional field.  See
'ReqFieldValuesInput'.

**Note** This field is similar to 'ReqFieldValues'.  This object does not
include the 'reduced' specification.
"""
input CompValuesInput {
  txtValues: [String!]
  intValues: [Int!]
  spanValues: [SpanInput!]
}
"""
TODO: Reduced - can it be coordinated / unified with the reduced field for requests?
"""
input SpanInput {
  rangeStart: Int!
  rangeLength: Int!
  reduced: Boolean!
}

# Type view
"""
Quality values is a `union` of `TxtValues` and `IntValues`.
"""
union QualityValues = TxtValues | IntValues

"""
Component values is a union of `TxtValues`, `IntValues` and
`SpanValues`. The values for each are retrieved in their respective
`Object` with the txt, int or spanValues prop.

__Note__: For Requests, the union ComponentValues is wrapped
in an object with the extra 'reduced'::Boolean property.
"""
union ComponentValues = TxtValues | IntValues | SpanValues

"""
Object required to be part of a union
"""
type TxtValues {
  """
  One of three possible `FieldValues`
  """
  txtValues: [String!]!
}
"""
Object required to be part of a union
"""
type IntValues {
  """
  One of three possible `FieldValues`
  """
  intValues: [Int!]!
}
"""
Object required to be part of a union. `SpanValues` are
only relevant for a `Component`.
"""
type SpanValues {
  """
  One of three possible `FieldValues`. `SpanValues` are relevant for
  `Measurement` only.  It is a `Component` that describes /time/.
  """
  spanValues: [Span!]!
}
"""
Describes a time period (time span). Each span has a start, length and type.
EXP means Expressed RED means a reduced version.  EXP will generate the number
of values equal to length.  RED generates a single summary value using a
monoid binary operation.
"""
type Span {
  rangeStart: Int!
  rangeLength: Int!
  reduced: Boolean!
}

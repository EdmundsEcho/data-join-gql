# MatrixSpec is a view of the Model.Request
"""
Describes the specification for pulling the Matrix data.
Matrix simply means a table of data where each row describes a single `Subject`.
The specification includes an Expression for Subject and a list of Expressions
for the Measurements.
"""
type MatrixSpec {
  """
  Expression that describe the requested `Subject`s. Each `Filter` in the
  `Expression` are used to determine the qualities of the subjects to be
  included in the matrix data request.
  """
  subExpression: Expression!
  """
  Fields that describe the measurement(s) for a given `Subject`.
  Each `Expression` captures a field in the matrix generated
  using `GROUP BY SUBJECT ID`.
  """
  meaExpressions: [Expression!]!
  """
  header is a collection of `FieldNames` sourced as follows:

    * `LHS` of a `Relation` for Qualities (1 per `Relation`)

    * Composition of `Filters` that make-up the `Filter`
      for Components (1 per `Filter`)

    * The implied `Measurement` value (1 per `Measurement`)

    * The implied `Subject` id (1 per `Matrix`)
  """
  header: [FieldName!]
  """
  Total fieldCount =

  1 Subject + N Measurements + N Filters + N Relations for Suject Qualities
  """
  fieldCount: Int!
}
type Expression {
  source: ETLTable!
  filter: Filter
  fields: [FieldName!]
  reducer: ReducerEnum
}
"""
ETLTable is a source in the ETL warehouse.  Tables in the warehouse are
organized by `etlUnit`.  These units represent valid functions that
describe the 'Model.ETL.ObsETL' data. The identifying feature is the
codomain (output) of the function, thus the name of the source.

  * type Quality

      @ Subject -> Quality @

  * type Measurement

      @ Subject -> zero+ [Component] -> SpanType -> Measurement Value

From EtlUnit -> Matrix

  * Minimum:   ReqQualities -> Empty

  * Generally: ReqQualities -> Filter [QualityName IN Values]
"""
type ETLTable {
  codomain: String!
}
"""
Here, `fieldName` describes a field in the matrix.

The value is set by the mix of components used to generate a `Filter`.

This concept for `Qualities` is true for `Relation`
"""
type Filter {
  relations: [Relation!]!
  fieldName: FieldName
}
type FieldName {
  value: String!
}
enum ReducerEnum {
  AVG
  SUM
}
"""
Note: Use _type to learn the type of the RHS union type.
"""
type Relation {
  lhs: LHS!
  rhs: RHS!
  relation: RelSymbolEnum!
}
"""
`fieldName` represents the component or quality set.

This concept extends to a fieldName in the matrix for qualities.
"""
type LHS {
  fieldName: FieldName!
}
"""
RHS type definition.  This is a unifying data type.

It pulls values from ETL:
* TxtValues
* IntValues
* SpanValues

Note: Use `__typename` to learn the type of the output.
"""
union RHS = TxtValues | IntValues | SpanFilter

type SpanFilter {
  range: FilterRange!
}
type FilterRange {
  filterStart: Int!
  filterEnd: Int!
}
"""
The relations used in the filters

*Updated Jun 2021 to include contras*
"""
enum RelSymbolEnum {
  IN
  EQ
  BETWEEN
  NOT_IN
  NOT_EQ
  NOT_BETWEEN
}
